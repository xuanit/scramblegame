Setup:
	1)Set up database.
		1.1) Create a schema with name "scramble_game"
		1.2) Execute the script file "initDB.sql" to create the database.
		1.3) (Optional) Install python, configure and execute the file \data_base\insert_data.py to insert 300k words into databas.)
	2)Configure DB connection info in \scramble_game\conf\application.conf
		default.url="jdbc:mysql://localhost/scramble_game"
		default.username=<your db user name>
		default.password=<your db password>
	3)install webpack globally : npm install webpack -g (skip this step if you have webpack installed already)
	4)Go to \scramble_game\javascripts, and run "npm install" to install required node modules.
	5)From \scramble_game\javascripts, run "webpack" to compile javascript files.
	6)Go to \scramble_game, run "activator compile" and "activator run" to start the server.
	7)Acess to the game at "http://localhost:9000/"
Functionalities:
	+ Implemented all important requirements.
	+ Used Reactjs, jQuery.
	+ Implemented "Press BackSpace to delete entered characters".
	+ Implemented ""Give up" button".
Architecture:
	+ GUI makes ajax requests to server to get characters, check a word or get all possible words.
	+ GUI:
		1) Home page : \scramble_game\app\viewss\cramblegame.scala.html
		2) Javascript code for GUI in \scramble_game\javascripts. The js files are compiled and copied to \scramble_game\public\javascripts by Webpack.
	+ Server code:
		1)Three layers: Controller (Presentation), Service for business logic, Repository for DA access logic.
		2)Unit test in \scramble_game\test
		3)Server tracked characters provided to the client in Play session.
		
Note: This app use Mysql function "rand()" to get a random word from db.